install.packages(seqinr)
install.packages("seqinr")
> getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
install.packages('ape')
library('ape')
?read.GenBank
View(getncbiseq)
geoc <- read.GenBank("NP_953259")
install.packages('biomartr')
library('biomartr')
library('biomartr')
library("biomartr", lib.loc="~/R/win-library/3.3")
install.packages('biostrings')
install.packages('Biostrings')
library("biomartr", lib.loc="~/R/win-library/3.3")
install.packages('installr')
library("installr", lib.loc="~/R/win-library/3.3")
updateR()
install.packages('biomartr')
load("D:/GeoTrans/Wspacefeb18.RData")
library(BiocInstaller)
biocLite(DESeq2)
biocLite('DESeq2')
biocLite("GenomicFeatures")
biocLite("GenomicAlignments")
library(pheatmap)
biocLite('pheatmap')
library(pheatmap)
pheatmap(mat100HL, annotation_col=df100HL)
library("pheatmap", lib.loc="~/R/win-library/3.4")
pheatmap(mat100HL, annotation_col=df100HL,fontsize=9.5 )
pheatmap(mat100HL, annotation_col=df100HL)
pheatmap(mat100HL, annotation_col=df100HL, cellheight = 1)
pheatmap(mat100HL, annotation_col=df100HL, cellheight = 5)
pheatmap(mat100HL, annotation_col=df100HL, cellheight = 10)
pheatmap(mat100HL, annotation_col=df100HL, cellheight = 8)
pheatmap(mat100HL, annotation_col=df100HL, fontsize=8)
pheatmap(mat100HL, annotation_col=df100HL, fontsize=5)
biocLite('QUBIC')
library(QUBIC)
ddsmat <- assay(rld)
library("GenomicFeatures")
library("Rsamtools")
library("GenomicAlignments")
library("BiocParallel")
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(genefilter)
ddsmat <- assay(rld)
ddsmat <- assay(rld)[]
dds
rld
assay
mat <- assay(rld)[topVarGenes, ]
library("SummarizedExperiment", lib.loc="~/R/win-library/3.4")
matrld <- assay(rld)
library("GenomicRanges", lib.loc="~/R/win-library/3.4")
library("GenomicFeatures", lib.loc="~/R/win-library/3.4")
library("GenomicAlignments", lib.loc="~/R/win-library/3.4")
library("GenomeInfoDbData", lib.loc="~/R/win-library/3.4")
library("GenomeInfoDb", lib.loc="~/R/win-library/3.4")
library("genefilter", lib.loc="~/R/win-library/3.4")
library("DESeq2", lib.loc="~/R/win-library/3.4")
library("BiocInstaller", lib.loc="~/R/win-library/3.4")
library("BiocGenerics", lib.loc="~/R/win-library/3.4")
library("Biobase", lib.loc="~/R/win-library/3.4")
library("AnnotationDbi", lib.loc="~/R/win-library/3.4")
matrld <- assay(rld)
library(SummarizedExperiment)
matrld <- assay(rld)
head(txdb)
head(txdb)
txdb
head(gff)
head(assay(se), 3)
pwd
getwd()
setwd("D:/GeoTrans")
getwd()
ls()
list.files()
oprG <- "D:/GeoTrans/1224.opr"
oprG
list.files()
fastaG <- "D:/GeoTrans/geoPCA.fasta"
gffG <- "D:/GeoTrans/GCF_000007985.2_ASM798v2_genomic.gff"
se
as.table.default(se)
as.data.frame(se)
as.table(se)
as.matrix(se)
assay(se)
countG <- assay(se)
head(countG)
colnames(countG)<- c("plank1", "plank2", "plank3", "low1", "low2", "low3", "high1","high2","high3", "fbf1", "fbf2", "fbf3")
head(countG)
cond.in <- pre.proc(gffG, oprG, fastaG, countG, log2.expr = FALSE, sw = 100, verbose = TRUE)
library(Bioconductor)
library("BiocInstaller", lib.loc="~/R/win-library/3.4")
biocLite(CONDOP)
install.packages("CONDOP")
install.packages("CONDOP")
install.packages("CONDOP")
install.packages("CONDOP")
install.packages("CONDOP")
cond.in <- pre.proc(gffG, oprG, fastaG, countG, log2.expr = FALSE, sw = 100, verbose = TRUE)
library(CONDOP)
plotMA(resFUM, ylim=c(-5,5), alpha=0.05, main="planktonic v. fbf fold change, p<0.05 difference in red")
#same thing with 100 genes
cond.in <- pre.proc(gffG, oprG, fastaG, countG, log2.expr = FALSE, sw = 100, verbose = TRUE)
library(CONDOP)
?rlang
library(rlang)
install.packages("rlang")
library(rlang)
library(CONDOP)
cond.in <- pre.proc(gffG, oprG, fastaG, countG, log2.expr = FALSE, sw = 100, verbose = TRUE)
head(oprG)
head(read.delim(oprG))
tail(read.delim(oprG))
head(read.delim(gffG))
tail(read.delim(gffG))
tail(read.delim(gffG,sep=","))
library(ggplot2)
prettyPlot <- function(gene1,dds){
data <- plotCounts(dds, gene=gene1, intgroup=c("description"), returnData=TRUE)
ggplot(data, aes(x=description, y=count, color=description ) ) +
scale_y_log10() +
geom_point(position=position_jitter(width=.1,height=0), size=3) + ggtitle(gene1)
}
prettyPlot("pilA-N")
library(DESeq2)
prettyPlot("pilA-N")
prettyPlot(dds, "pilA-N")
library("GenomicFeatures")
library("Rsamtools")
prettyPlot(dds, "pilA-N")
library("GenomicAlignments")
prettyPlot(dds, "pilA-N")
prettyPlot(dds, "pilA-N")
plotCounts(dds2, gene="omcZ", intgroup = "description")
prettyPlot("omcZ", dds2)
prettyPlot("pilA-N", dds2)
prettyPlot("pilA-C", dds2)
prettyPlot("pilC", dds2)
prettyPlot("pilB", dds2)
pil <- MeanSDmat[grep("pil", rownames(MeanSDmat)),] #subset all genes with string omc in name
MeanSDmat <- cbind(plankMAT[, colnames(plankMAT)%in%c("plankMeans", "SD")], HighMAT[, colnames(HighMAT)%in%c("HighMeans", "HighSD")])
planknames <- c("plank1", "plank2", "plank3") #(planktonic samples)
plankMAT <- matrld[, colnames(matrld)%in%planknames]
matrld <- assay(rld) #turn rlog deseq2 data into a matrix
plankMAT <- matrld[, colnames(matrld)%in%planknames]
Highnames <- c("high1", "high2", "high3") #(high samples)
HighMAT <- matrld[, colnames(matrld)%in%Highnames]
Lownames <- c("low1", "low2", "low3") #(low samples)
LowMAT <- matrld[, colnames(matrld)%in%Lownames]
FBFnames <- c("fbf1", "fbf2", "fbf3") #(fbf samples)
FBFMAT <- matrld[, colnames(matrld)%in%FBFnames]
plankMeans <- rowMeans(plankMAT)
plankMAT<- cbind(plankMAT, plankMeans)
plankMAT <- transform(plankMAT, SD=apply(plankMAT,1, sd, na.rm = TRUE))
plankMAT<- cbind(plankMAT, plankMeans)
plankMAT <- transform(plankMAT, SD=apply(plankMAT,1, sd, na.rm = TRUE))
plankMAT
plankMAT <- matrld[, colnames(matrld)%in%planknames]
head(plankMAT)
colnames(matrld)<- c("plank1", "plank2", "plank3", "low1", "low2", "low3", "high1","high2","high3", "fbf1", "fbf2", "fbf3")
plankMAT <- matrld[, colnames(matrld)%in%planknames]
head(plankMAT)
Highnames <- c("high1", "high2", "high3") #(high samples)
HighMAT <- matrld[, colnames(matrld)%in%Highnames]
Lownames <- c("low1", "low2", "low3") #(low samples)
LowMAT <- matrld[, colnames(matrld)%in%Lownames]
FBFnames <- c("fbf1", "fbf2", "fbf3") #(fbf samples)
FBFMAT <- matrld[, colnames(matrld)%in%FBFnames]
plankMeans <- rowMeans(plankMAT)
plankMAT<- cbind(plankMAT, plankMeans)
plankMAT <- transform(plankMAT, SD=apply(plankMAT,1, sd, na.rm = TRUE))
head(plankMAT)
plankMAT <- transform(plankMAT, plankSD=apply(plankMAT,1, sd, na.rm = TRUE))
HighMeans <- rowMeans(HighMAT)
HighMAT<- cbind(HighMAT, HighMeans)
HighMAT <- transform(HighMAT, HighSD=apply(HighMAT,1, sd, na.rm = TRUE))
plankMAT <- matrld[, colnames(matrld)%in%planknames]
Highnames <- c("high1", "high2", "high3") #(high samples)
HighMAT <- matrld[, colnames(matrld)%in%Highnames]
Lownames <- c("low1", "low2", "low3") #(low samples)
LowMAT <- matrld[, colnames(matrld)%in%Lownames]
FBFnames <- c("fbf1", "fbf2", "fbf3") #(fbf samples)
FBFMAT <- matrld[, colnames(matrld)%in%FBFnames]
head(plankMAT)
plankMeans <- rowMeans(plankMAT)
plankMAT <- transform(plankMAT, plankSD=apply(plankMAT,1, sd, na.rm = TRUE))
plankSD <- apply(plankMAT,1, sd, na.rm = TRUE))
plankSD <- apply(plankMAT,1, sd, na.rm = TRUE)
head(plankSD)
plankMAT<- cbind(plankMAT, plankMeans)
plankMAT <- cbind(plankMAT, plankSD)
head(plankMAT)
HighMeans <- rowMeans(HighMAT)
HighSD <- apply(HighMAT,1, sd, na.rm = TRUE)
HighMAT<- cbind(HighMAT, HighMeans)
HighMAT <- cbind(HighMAT, HighSD)
LowMeans <- rowMeans(LowMAT)
LowSD <- apply(LowMAT,1, sd, na.rm = TRUE)
LowMAT<- cbind(LowMAT, LowMeans)
LowMAT <- cbind(LowMAT, LowSD)
FBFMeans <- rowMeans(FBFMAT)
FBFSD <- apply(FBFMAT,1, sd, na.rm = TRUE)
FBFMAT<- cbind(FBFMAT, FBFMeans)
FBFMAT <- cbind(FBFMAT, FBFSD)
MeanSDmat <- cbind(plankMAT[, colnames(plankMAT)%in%c("plankMeans", "SD")], HighMAT[, colnames(HighMAT)%in%c("HighMeans", "HighSD")])
MeanSDmat <- cbind(MeanSDmat, LowMAT[, colnames(LowMAT)%in%c("LowMeans", "LowSD")], FBFMAT[, colnames(FBFMAT)%in%c("FBFMeans", "fbfSD")])
omc <- MeanSDmat[grep("omc", rownames(MeanSDmat)),] #subset all genes with string omc in name
write.csv(omc, file="omc-correct.csv")
pil <- MeanSDmat[grep("pil", rownames(MeanSDmat)),] #subset all genes with string omc in name
write.csv(pil, file="pil.csv")
head(MeanSDmat)
MeanSDmat <- cbind(plankMAT[, colnames(plankMAT)%in%c("plankMeans", "SD")], HighMAT[, colnames(HighMAT)%in%c("HighMeans", "HighSD")])
head(MeanSDmat)
head(plankMAT)
MeanSDmat <- cbind(plankMAT[, colnames(plankMAT)%in%c("plankMeans", "plankSD")], HighMAT[, colnames(HighMAT)%in%c("HighMeans", "HighSD")])
head(MeanSDmat)
MeanSDmat <- cbind(MeanSDmat, LowMAT[, colnames(LowMAT)%in%c("LowMeans", "LowSD")], FBFMAT[, colnames(FBFMAT)%in%c("FBFMeans", "fbfSD")])
head(MeanSDmat)
MeanSDmat <- cbind(plankMAT[, colnames(plankMAT)%in%c("plankMeans", "plankSD")], HighMAT[, colnames(HighMAT)%in%c("HighMeans", "HighSD")])
MeanSDmat <- cbind(MeanSDmat, LowMAT[, colnames(LowMAT)%in%c("LowMeans", "LowSD")], FBFMAT[, colnames(FBFMAT)%in%c("FBFMeans", "FBFSD")])
head(MeanSDmat)
omc <- MeanSDmat[grep("omc", rownames(MeanSDmat)),] #subset all genes with string omc in name
write.csv(omc, file="omc-correct.csv")
pil <- MeanSDmat[grep("pil", rownames(MeanSDmat)),] #subset all genes with string omc in name
write.csv(pil, file="pil.csv")
write.csv(pil, file="pil.csv")
write.csv(pil, file="pil2.csv")
prettyPlot(dds2, "pilE")
prettyPlot("pilE",dds2)
biclustrld2
library(QUBIC)
matrld <- assay(rld) #turn rlog deseq2 data into a matrix
biclustrld2 <- biclust(matrld,r=2,k=3, method=BCQU(), verbose=TRUE)
library(QUBIC)
library(BiocInstaller)
biocLite(QUBIC)
biocLite("QUBIC")
biclustrld2 <- biclust(matrld,r=2,k=3, method=BCQU(), verbose=TRUE)
library(QUBIC)
biclustrld2 <- biclust(matrld,r=2,k=3, method=BCQU(), verbose=TRUE)
library(QUBIC)
library(QUBIC)
install.packages("Rcpp")
library(QUBIC)
matrld <- assay(rld) #turn rlog deseq2 data into a matrix
library(DESeq2)
library(stringi)
library(stringi)
install.packages("stringi")
biclustrld2 <- biclust(matrld,r=2,k=3, method=BCQU(), verbose=TRUE)
biclustrld2 <- biclust(matrld,r=2,k=2, method=BCQU(), verbose=TRUE)
biclustrld2
biclustrld2 <- biclust(matrld,r=2,k=3, method=BCQU(), verbose=TRUE)
biclustrld2
biclustrld2 <- biclust(matrld,r=1,k=3, method=BCQU(), verbose=TRUE)
biclustrld2
biclustrld2 <- biclust(matrld,r=2,k=3, method=BCQU(), verbose=TRUE)
biclustrld2
head(biclustrld2)
res
summary(biclustrld2)
