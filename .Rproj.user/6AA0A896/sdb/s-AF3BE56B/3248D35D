{
    "collab_server" : "",
    "contents" : "#Geobacter Transcriptomics (mostly adapted from Damien Finn)\n#install libraries. Bioconductor makes this possible. This shouldn't have to be done after the first time\nbiocLite(c(\"GenomicFeatures\", \"Rsamtools\", \"GenomicAlignments\", \"BiocParallel\"))\n\n#load libraries\nlibrary(\"GenomicFeatures\")\nlibrary(\"Rsamtools\")\nlibrary(\"GenomicAlignments\")\nlibrary(\"BiocParallel\")\n\n#shortcut after saving workspace image:\nload(\"/home/sceb/Desktop/data/users/EthanHowley/geobacterTraw/PCA_alignments_SAM_files/Wspacejan18.RData\")\n\n\ninstalled.packages() #see installed packages\n#choose working directory\n\ndir <- file.path(\"/home/sceb/Desktop/data/users/EthanHowley/geobacterTraw/PCA_alignments_SAM_files\")\ndir #check directory\n\nlist.files(dir)\t\t#read out files in directory\n\n#read in metadata csv\nmetadata <- file.path(dir, \"GeobacterMeta.csv\")\n#read the metadata into a table from the csv\nSampleTable <- read.csv(metadata, row.names = 1)\n#Collect the sample names from the SampleTable into a variable\nfilenames <- file.path(dir, paste0(SampleTable$SampleName, \".bam\"))\n#check that everything exists \nfile.exists(filenames)\n#create list of .bam files\nbamfiles <- BamFileList(filenames)\n\nseqinfo(bamfiles) #check if this matches the assembly to count against\n\n#set up TxDb mapping file from GFF file\ngff <- file.path(dir, \"GCF_000007985.2_ASM798v2_genomic.gff\")\ntxdb <- makeTxDbFromGFF(gff, format=\"auto\", dataSource=\"NCBI\", circ_seqs=character()) #not sure if circ_seqs is necessary\n\n#make a table of exons by gene\n(ebg <- exonsBy(txdb, by = \"gene\"))\nView(ebg)\nseqinfo(ebg) #make sure seqinfo(ebg) matches that from the .bam files\n\n#Create summarized overlap. This is a step where I could probably change some variables. My bam files should be paired end though\n\nse <- summarizeOverlaps(features = ebg, reads = bamfiles, mode = \"Union\", singleEnd = FALSE, ignore.strand = TRUE)\n#Ensure some things are actually being counted\nhead(assay(se), 3)\nstr(metadata(rowRanges(se)))\n\n(colData(se) <- DataFrame(SampleTable))\nround(colSums(assay(se))) #outputs the number of aligned sequences per sample. For Geobacter it is fairly varied but the output from the sequencer was varied so I'm not terribly concerned although maybe I should check.\n\n#https://www.bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html\nlibrary(DESeq2)\ndds <- DESeqDataSet(se, design = ~ description) #I don't believe I have a condition variable to control for... only comparing type\n#Filter dataset to remove low count features < 20, as per Lorenz et al. 2014\ndds <- dds[rowSums(counts(dds)) > 20]\n#rlog transformation to make data homoskedastic\nrld <- rlog(dds, blind = FALSE)\n#Compare before and after transformation\npar(mfrow = c( 1, 2))\ndds <- estimateSizeFactors(dds)\nplot(log2(counts(dds, normalized = TRUE) [ , 1:2] + 1), pch = 16, cex = 0.3, main=\"before log\")\nplot(assay(rld)[ , 1:2], pch = 16, cex = 0.3, main=\"log transform\")\n#If happy with homoskedasticity, do some preliminary visualisations of similarity\n#between samples with pheatmap\nsampleDists <- dist(t(assay(rld)))\nlibrary(pheatmap)\nlibrary(RColorBrewer)\n#makes a matrix with the descriptions as row names\nsampleDistMatrix <- as.matrix(sampleDists)\nrownames(sampleDistMatrix) <- paste(rld$description)\ncolnames(sampleDistMatrix) <- NULL\ncolors <- colorRampPalette(rev(brewer.pal(9, \"Blues\")) ) (255)\n#not really sure what plotting a heatmap with no column names tells me but it looks nice\npheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors)\n#Begin DGE analysis with DESeq2 NB-GLM approach. The DESeq function will do\n#sample size estimates, gene dispersion estimates and fit data to NB-GLM\ndds2 <- DESeq(dds)\nres <- results(dds2)\nsummary(res)\n#Now, look at number of genes sig different based on 0.05, 0.01 and 0.001 levels\nres.05 <- results(dds2, alpha = 0.05)\ntable(res.05$padj < 0.05)\nsummary(res.05)\nres.001 <- results(dds2, alpha = 0.001)\ntable(res.001$padj < 0.001)\nsummary(res.001) #for my data, there are 389 genes with DE significant at this level. seems good?\n#visualize most differential genes\nlibrary(genefilter)\ntopVarGenes <- head(order(rowVars(assay(rld)), decreasing = TRUE), 1000) #the 1000 can be changed to capture more genes, this is the top 1000 in order\n#make a data frame with values normalized to mean, then a heatmap\nmat <- assay(rld)[topVarGenes, ]\nmat <- mat - rowMeans(mat)\ndf <- as.data.frame(colData(rld) [, c(\"description\")])\npheatmap(mat, annotation_col = df) # with 1000 genes it's hard to look at this. Let's cut it down\n#same thing with 100 genes\ntopVarGenes100 <- head(order(rowVars(assay(rld)), decreasing = TRUE), 100)\nmat100 <- assay(rld)[topVarGenes100, ]\nmat100 <- mat100 - rowMeans(mat100)\ndf100 <- as.data.frame(colData(rld) [, c(\"description\")])\npheatmap(mat100, annotation_col = df100)\n#hey let's do 20, why not?\ntopVarGenes20 <- head(order(rowVars(assay(rld)), decreasing = TRUE), 20)\nmat20 <- assay(rld)[topVarGenes20, ]\nmat20 <- mat20 - rowMeans(mat20)\ndf20 <- as.data.frame(colData(rld) [, c(\"description\")])\npheatmap(mat20, annotation_col = df20)\n#try a different type of heatmap\nlibrary(heatmaply)\nheatmaply(mat100)\n\n#let's compare only two conditions: (nope, start from top with two conditions only)\n#resHL <- results(dds2, contrast=c(\"description\", \"High\", \"Low\")) \n#resHL.01 <- results(dds2, alpha = 0.01,contrast=c(\"description\", \"High\", \"Low\") )\n#table(resHL.01$padj < 0.01)\n#summary(resHL.01)\n#heatmap top 20 high v low\n#resOrderedHL <- resHL[order(resHL$padj),]\n#topVarGenes20HL <- head(resOrderedHL, 20)\n#selectGenesHL20 <- rownames(subset(topVarGenes20HL, ))\n#mat20HL <- assay(rld)[selectGenesHL20, ]\n#mat20HL <- mat20HL - rowMeans(mat20HL)\n#df20HL <- as.data.frame(colData(rld) [, c(\"description\")])\n#pheatmap(mat20HL, annotation_col = df20HL)\n\n#repeat with only high and low conditions:\nmetadataHL<- file.path(dir, \"GeobacterMetaHL.csv\")\nSampleTableHL <- read.csv(metadataHL, row.names = 1)\nfilenamesHL <- file.path(dir, paste0(SampleTableHL$Sample_name, \".bam\"))\n#check that everything exists \nfile.exists(filenamesHL)\n#create list of .bam files\nbamfilesHL <- BamFileList(filenamesHL)\n\nseHL <- summarizeOverlaps(features = ebg, reads = bamfilesHL, mode = \"Union\", singleEnd = FALSE, ignore.strand = TRUE)\n#Ensure some things are actually being counted\nhead(assay(seHL), 3)\nstr(metadata(rowRanges(seHL)))\n\n(colData(seHL) <- DataFrame(SampleTableHL))\nround(colSums(assay(seHL)))\nddsHL <- DESeqDataSet(seHL, design = ~ description) #I don't believe I have a condition variable to control for... only comparing type\n#Filter dataset to remove low count features < 20, as per Lorenz et al. 2014\nddsHL <- ddsHL[rowSums(counts(ddsHL)) > 20]\n#rlog transformation to make data homoskedastic\nrldHL <- rlog(ddsHL, blind = FALSE)\n#Compare before and after transformation\npar(mfrow = c( 1, 2))\nddsHL <- estimateSizeFactors(ddsHL)\nplot(log2(counts(ddsHL, normalized = TRUE) [ , 1:2] + 1), pch = 16, cex = 0.3, main=\"before log\")\nplot(assay(rldHL)[ , 1:2], pch = 16, cex = 0.3, main=\"log transform\")\n#If happy with homoskedasticity, do some preliminary visualisations of similarity\n#between samples with pheatmap\nsampleDistsHL <- dist(t(assay(rldHL)))\nlibrary(pheatmap)\nlibrary(RColorBrewer)\n#makes a matrix with the descriptions as row names\nsampleDistMatrixHL <- as.matrix(sampleDistsHL)\nrownames(sampleDistMatrixHL) <- paste(rldHL$description)\ncolnames(sampleDistMatrixHL) <- NULL\ncolors <- colorRampPalette(rev(brewer.pal(9, \"Blues\")) ) (255)\n#not really sure what plotting a heatmap with no column names tells me but it looks nice\npheatmap(sampleDistMatrixHL, clustering_distance_rows = sampleDistsHL, clustering_distance_cols = sampleDistsHL, col = colors)\n#Begin DGE analysis with DESeq2 NB-GLM approach. The DESeq function will do\n#sample size estimates, gene dispersion estimates and fit data to NB-GLM\nddsHL <- DESeq(ddsHL)\nresHL <- results(ddsHL)\nsummary(resHL)\n#same thing with 100 genes\ntopVarGenes100HL <- head(order(rowVars(assay(rldHL)), decreasing = TRUE), 100)\nmat100HL <- assay(rldHL)[topVarGenes100HL, ]\nmat100HL <- mat100HL - rowMeans(mat100HL)\ndf100HL <- as.data.frame(colData(rldHL) [, c(\"description\")])\npheatmap(mat100HL, annotation_col = df100HL)\n\n#how about I try some clustering with RQUBIC\nlibrary(QUBIC)\nmatrld <- assay(rld) #turn rlog deseq2 data into a matrix\nbiclustrld2 <- biclust(matrld,r=2,k=3, method=BCQU(), verbose=TRUE)\nlibrary(fields)\ncolnames(matrld)<- c(\"plank1\", \"plank2\", \"plank3\", \"low1\", \"low2\", \"low3\", \"high1\",\"high2\",\"high3\", \"fbf1\", \"fbf2\", \"fbf3\")\nquheatmap(matrld, biclustrld2, showlabel = TRUE, number=7 )\n#make a network\nnet2 <- qunetwork(matrld, biclustrld, number=2, group=2, method=\"spearman\")\nif (requireNamespace(\"qgraph\", quietly = TRUE))\n  qgraph::qgraph(net2[[1]], groups = net2[[2]], layout = \"spring\", minimum = 0.6,\n                 legend.cex = 0.5, color = c(\"red\", \"blue\", \"gold\", \"gray\"), edge.label = FALSE)\n\n#Pathway analysis\nlibrary(gage)\nlibrary(pathview)\npathview(gene.data = matrld, pathway.id=\"00010\", species=\"gsu\", gene.idtype = \"kegg\") #glycolysis\n\n\n#compare only specific genes\nCbCH <- c(\"GSU0274\", \"GSU3259\") #(cbcl, imcH)\nCbCHmat <- subset(matrld, rownames(matrld) %in% CbCH)\nmatCbCHdiff <- CbCHmat - rowMeans(CbCHmat)\ndfCbCH <- as.data.frame(colData(rld) [, c(\"description\")])\npheatmap(matCbCHdiff, annotation_col = dfCbCH)\n\n#try same with only high and low\nHLCbCH <- assay(rldHL)[CbCH, ]\nHLCbCH <- HLCbCH - rowMeans(HLCbCH)\ndfHLCbCH <- as.data.frame(colData(rldHL) [, c(\"description\")])\npheatmap(HLCbCH, annotation_col = dfHLCbCH, cluster_cols = F)\n\n#look at only 'cytochromes'\n#download list of genes with cytochrome in description. Take symbols into GScytnames\nGScytMAT <- assay(rld)[GScytNam,]\nGScytMAT <- GScytMAT - rowMeans(GScytMAT)\ndfGScyt <- as.data.frame(colData(rld) [, c(\"description\")])\npheatmap(GScytMAT, annotation_col = dfGScyt, cluster_cols = F ) #pretty interesting actually\n\n#do with just high and low\nGScytMAT <- assay(rldHL)[GScytNam,]\nGScytMAT <- GScytMAT - rowMeans(GScytMAT)\ndfGScyt <- as.data.frame(colData(rldHL) [, c(\"description\")])\npheatmap(GScytMAT, annotation_col = dfGScyt, cluster_cols = F )\n",
    "created" : 1518112775837.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1108550536",
    "id" : "3248D35D",
    "lastKnownWriteTime" : 1518753010,
    "last_content_update" : 1518753010584,
    "path" : "D:/GeoTrans/GeobacterTransEthan.R",
    "project_path" : "GeobacterTransEthan.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}